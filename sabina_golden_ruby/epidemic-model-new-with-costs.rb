### the shebang headers are passed in the "header" file, which varies by environment

puts "Content-Type: text/html\n\n"

t1 = Time.new

partnership_time = 0
scr_time  = 0
dynamics_times  = 0
adding_time  = 0



=begin
########################################################################################################################################################
########################################################## Step 1: Comments ############################################################
########################################################################################################################################################

This epidemic model is writen in Ruby and is based on an excel model written by Sabina Alistar. The program tracks the estimated HIV epidemic of one country 
given a set of parameters for that country. It breaks the nation up into five groups: general population males, general population females, sex workers, 
men who have sex with men, and intervenous drug users. Each of these five groups is accounted for throughout the modelling process. Within each of the five groups, 
there are 13 different disease stages: uninfected, acute, early, medium, late, aids, acute with treatment, early w tx, medium w tx, late w tx, and aids w tx.

The model is more or less a markov process. It uses a half-year cycle and examines how these populations change over 40 half-year cycles, or twenty years. 

To best represent this process, we create an set of ojects called a CycleGroupDiseaseStages, or CGDs. A CGD represents a single disease stage in a single 
group in a single year. For example, there are 65 total CGDs in the first cycle. There are 5 groups, 13 disease stages in one cycle = 65 CGDs. 
In the first and second cycle, there are a total of 65x2 =  130 CGDs.  

The model has a somewhat complex system which i will explain here. The first few steps take imported data from a JSON object, and turn them into global variables.
These variables generally concern epidemic parameters, such as the size of a cycle, or demographic or epidemiological data. The second major step is to assign all the relevant  

=end




########################################################################################################################################################
########################################################## Step 1: Programming Housekeeping ############################################################
########################################################################################################################################################

#this step sets up debugging and library support. Non-technical users do not need to understand what is going on in this step, except the addressing function

# ------------ needed libraries  ------------  #


require 'rubygems' #gems are ruby-speak for libraires (sets of useful variables and functions)
require 'irb' #allows for debugging
 #require 'pry'   for some reason cannot deploy when pry library is required. Ugh.
require 'csv' #allows for export to csv
require 'json' #json, a javascript data format, is a universal data format between many languages
require 'cgi'#common gateway interface, opens a port to talk to the client-side, essentially
require 'narray' #numeric array library


# ------------ debugging set up  ------------  #


module IRB # :nodoc:
  def self.start_session(binding)
   unless @__initialized
     args = ARGV
     ARGV.replace(ARGV.dup)
     IRB.setup(nil)
     ARGV.replace(args)
     @__initialized = true
   end

   workspace = WorkSpace.new(binding)

   irb = Irb.new(workspace)

   @CONF[:IRB_RC].call(irb.context) if @CONF[:IRB_RC]
   @CONF[:MAIN_CONTEXT] = irb.context

   catch(:IRB_EXIT) do
     irb.eval_input
   end
 end
end

# ------------  allows hash access like objects, through dot format  ------------  #

#hashes are associaitive arrays (arrays with string keys). this function allows us to access hashes through "dot format" as if they were methods

class ::Hash
 def method_missing(name)
  return self[name] if key? name
  self.each { |k,v| return v if k.to_s.to_sym == name }
  super.method_missing name
end
end

# ------------  Addressing function ------------  #

#these functions were built to allow us to avoid using the ".select" method, and directly access the item we're looking for.
#essentially, it uses a "address" array to store all the ids of different CDG's

class ::Array

  ##Need to compute next generation for cycle 41 so that cycle 40 updates and is identical to period 20 in excel. 
  
  def get_cycle(c)
    address = NArray.int(13,5,41).indgen!
    subpops = address[true,true,c]
    new_subpops = Array.new
    subpops.each{|s| new_subpops[s] = self[s] unless self[s].nil? }
    new_subpops
  end


  def get_group(g)
    address = NArray.int(13,5,41).indgen!
    subpops = address[true,g,true]
    new_subpops = Array.new
    subpops.each{|s| new_subpops[s] = self[s] unless self[s].nil? }
    new_subpops
  end

  def get_disease_stage(d)
    address = NArray.int(13,5,41).indgen!
    subpops = address[d,true,true]
    new_subpops = Array.new
    subpops.each{|s| new_subpops[s] = self[s] unless self[s].nil? }
    new_subpops
  end



  #tried making a suming function, did not work
  def sum(p = nil)
    output = self.compact
    if p.nil?
      return output.inject(0){ |memo,n| memo + n.to_f }
    else
      return output.inject(0){ |memo,n| memo + n.send(p).to_f }
    end
  end

  alias :d :get_disease_stage
  alias :g :get_group
  alias :c :get_cycle
  
end


################################################################################################################################################################
########################################################## Step 2: Pull key inputs from JSON and model housekeeping variables ############################################################
################################################################################################################################################################


online = true

if online

  # ------------  json data version (online only)  ------------  #

  cgi = CGI.new('html5')
  json = cgi.params["custom"][0]
  json2 = cgi.params["InterventionSubpopulationNationCoverage"][0]
  json3 = cgi.params["CostInputs"][0]
  
  custom = JSON.parse(json)

  intervention_subpopulation_coverage = JSON.parse(json2)
  intervention_subpopulation_coverage.collect{|item| item['SubpopulationId'] = item['SubpopulationId'] -1}

  CostInputs = JSON.parse(json3)


else

  # ------------  file data version (for offline)  ------------  #

  file = File.open('custom.json', 'r')
  json = file.readlines                      #to rb1.9
  custom = JSON.parse(json[0]) #to rb1.9

  file2 = File.open('intervention_subpopulation_coverage.json', 'r')
  json2 = file2.readlines  #to rb1.9
  intervention_subpopulation_coverage = JSON.parse(json2[0]) #to rb1.9
  intervention_subpopulation_coverage.collect{|item| item['SubpopulationId'] = item['SubpopulationId'] -1}

  file3 = File.open('cost-inputs.json', 'r')
  json3 = file3.readlines  #to rb1.9
  CostInputs = JSON.parse(json3[0]) #to rb1.9

  #puts intervention_subpopulation_coverage==intervention_subpopulation_coverage2


  #IRB.start_session(binding)

end

# IRB.start_session(binding)

# puts '{"total_prevalence":[0.22362408696054709,0.21491577102590642,0.20685728655689345,0.19195494488442957,0.17834411471991685,0.16726030068825132,0.1575292009341281,0.14879350986592668,0.14097561908113332,0.13401175121812545,0.1278274839080684,0.12234198183921342,0.11747331121620784,0.11314212550376965,0.1092740557926459,0.10580116665036837,0.10266273635898834,0.09980555176411707,0.09718385820761505,0.0947590640072442,0.0924992668506545,0.09037864890682404,0.08837677870805032,0.08647785743227938,0.08466994938900385,0.08294423615850623,0.08129432855408474,0.07971566098242143,0.07820498128697922,0.07675993840371224,0.07537876190667678,0.07406002239169754,0.07280245936486063,0.07160486314321214,0.07046599843026898,0.06938455902256549,0.06835914506305144,0.06738825610245695,0.06647029482589709,0.06560357760873971,0.06478634909597804],"total_new_infections":[51239.59272061991,13283.959923834926,24309.12239107309,26444.590499632584,27553.90364783004,28308.495471074213,28659.278065087303,28662.927653562314,28400.780286477864,27954.309620261716,27399.130950006518,26800.265975147384,26206.84575671386,25650.096993362415,25145.92014478592,24699.765243393085,24311.154584129443,23976.74136899351,23692.019953974097,23452.180924221946],"total_new_infections_per_pop":[1906.7010252886205,508.1493200139315,952.8044439797835,1057.9089848115314,1120.8556332119872,1167.3054867938029,1194.8900717985523,1205.8797902479234,1203.8110204147706,1192.3440564295088,1174.925654990287,1154.5447397732678,1133.487210103116,1113.2422669334176,1094.6124774187522,1077.9270781546934,1063.2419179105723,1050.4760291726354,1039.4888611783783,1030.1194355500675],"cumulative_total_new_infections":[51239.59272061991,64523.55264445484,88832.67503552794,115277.26553516052,142831.16918299056,171139.66465406478,199798.94271915208,228461.8703727144,256862.65065919224,284816.96027945395,312216.0912294605,339016.35720460786,365223.20296132175,390873.29995468416,416019.22009947005,440718.98534286313,465030.1399269926,489006.8812959861,512698.90124996024,536151.0821741822],"hiv_deaths":[99543.1571702685,88501.21623298293,76621.85171718121,65891.88490922062,57235.37521745869,50345.502015780585,44998.33651214585,40910.88771338898,37792.16175529903,35380.958054607836,33465.12040252476,31886.251130480843,30535.12735666207,29342.246355288982,28266.902031858812,27287.17707270077,26392.111208562106,25576.307516837194,24836.625270870605,24170.390468128113],"cumulative_hiv_deaths":[99543.1571702685,188044.37340325143,264666.2251204327,330558.1100296533,387793.485247112,438138.9872628926,483137.3237750385,524048.2114884275,561840.3732437266,597221.3312983344,630686.4517008591,662572.70283134,693107.8301880021,722450.0765432911,750716.9785751499,778004.1556478507,804396.2668564129,829972.57437325,854809.1996441206,878979.5901122488],"prevalence_by_group":[[0.22000000000000003,0.8757281470857147,0.5614954700440343,0.5854878526222185,0.5326556496433104,0.5189265549340379,0.5118818307599713,0.5039038277078989,0.4950723860749892,0.4854824824841269,0.47515299451347454,0.4640884845684792,0.4523212825507148,0.4399192235297056,0.42698090060350347,0.41362698093032374,0.39999101290513817,0.3862110181085885,0.3724223480311123,0.3587519683778058,0.3453141967616996,0.3322078407104693,0.3195146222558049,0.30729872579222217,0.2956072704547896,0.2844714904420416,0.2739084070683417,0.263922792422845,0.2545092519962876,0.24565428755252228,0.23733823728297263,0.22953702426048198,0.2222236739569999,0.21536958580200646,0.20894556207579695,0.2029226101752767,0.19727254219818838,0.19196839979609898,0.18698473330574567,0.18229776316196425,0.1778854492670172],[0.22000000000000006,0.20349605788725111,0.18786874778653756,0.1729509924666705,0.15923563639439037,0.14649341786387532,0.1348799833492101,0.12436919132632172,0.11491990606861989,0.10648386648142384,0.09899955274243213,0.09239547741773108,0.08659377022369424,0.08151360438048066,0.07707417628838202,0.07319714054853001,0.0698084669309814,0.06683974061164809,0.06422896381489603,0.06192093700045225,0.05986730417467982,0.05802634398426665,0.05636257978682682,0.05484627084703174,0.053452835197614845,0.05216224374213933,0.05095841547136841,0.049828635435855265,0.048763010355358904,0.04775397132764546,0.046795828854905415,0.04588438215534375,0.045016582299744465,0.044190246955613056,0.04340382330415042,0.04265619490852456,0.04194652786563802,0.04127415139396152,0.04063846803617558,0.04003888883679423,0.039474789149302476],[0.508,0.6941073213994869,1.29648432582997,1.0553077281573784,0.9825011825947756,0.972723596575393,0.9686723798739392,0.965631958405687,0.9626097820120613,0.959522962297757,0.9563208203665978,0.9529677153293559,0.9494383719951104,0.9457167938410084,0.9417941309172218,0.9376667020815479,0.9333343887359747,0.9287994552955836,0.9240657768483647,0.9191384193057995,0.9140234967863654,0.908728222113757,0.9032610674260442,0.8976319607840408,0.8918524587247866,0.8859358513369624,0.8798971734241391,0.8737531110166495,0.8675218058257154,0.861222570636999,0.8548755359253618,0.8485012522133701,0.8421202741502694,0.8357527513427971,0.8294180481047827,0.8231344100498381,0.8169186903940533,0.8107861435074135,0.8047502881360606,0.7988228381985953,0.7930136954060324],[0.039,0.017186530380602225,0.011167697282883821,0.008321495048009038,0.006650967242387258,0.005546810342517023,0.004759856571413298,0.004169240252490331,0.003709105477839014,0.0033403689325381875,0.003038276089911852,0.002786326256081274,0.0025730620125368427,0.0023902607943583148,0.0022318606150900215,0.0020932922509278766,0.0019710474693041356,0.0018623902010390131,0.0017651575696437272,0.0016776193303168125,0.0015983764306307748,0.0015262864769714514,0.0014604081366381583,0.001399959131949094,0.0013442841543569335,0.0012928301198573881,0.0012451269205240709,0.0012007723309351616,0.0011594200818280476,0.0011207703659602828,0.0010845622244538592,0.0010505673965401962,0.0010185853154903665,0.0009884390081528333,0.0009599717116330706,0.0009330440630342144,0.0009075317503227278,0.0008833235368529818,0.0008603195907825411,0.0008384300649557326,0.0008175738838902581],[0.4000000000000001,0.2191278057484718,0.18062098888965358,0.16969242885760022,0.16973650727350156,0.17590720799293758,0.18640102539923423,0.200435462071358,0.2176202968042786,0.23772763584251244,0.2605736497838837,0.2859517554847288,0.31359191642644785,0.3431370260967169,0.37413435342323154,0.4060421527185682,0.4382511610832016,0.47011884919259145,0.5010118809400783,0.530350288189869,0.5576462690771501,0.5825316761594675,0.6047708778886454,0.6242588815509661,0.6410073720847821,0.6551229309596157,0.6667819796453089,0.6762062451543185,0.6836412896274598,0.6893393595088583,0.6935467885648612,0.6964955347541834,0.6983981116762381,0.69944509860421,0.6998044800738781,0.6996221982570714,0.699023447768271,0.6981143754777708,0.6969839560072405,0.6957058951737063,0.694340471784069]],"total_plwa":[600954.5800000001,569398.0188976164,540763.0781636534,495548.9335446843,455013.5066903641,422178.4786090062,393776.3333373618,368689.10069606703,346559.22758966737,327093.6172340616,309996.294048909,294976.3148643215,281758.16092473443,270087.9962173217,259736.86439773507,250501.8562436241,242205.94175451485,234696.94028254133,227845.95165949868,221545.45809695253,215707.22491727627,210260.0795769312,205147.63038698927,200325.98855585858,195761.56520235736,191429.0165490936,187309.4001511946,183388.58444222712,179655.92891871845,176103.2291181975,172723.90323655505,169512.3871157218,166463.7006789638,163573.1499481024,160836.13264370846,158248.02047999,155804.09654745724,153499.5310102762,151329.3824527152,149288.61552856732,147372.12815623556],"plwa_by_group":[[753.0600000000001,19090.372194728934,22308.94904795336,32976.383883245166,38450.967056855974,45131.44256596893,51654.63277442893,57434.318403441575,62480.90390346281,66828.14522223959,70507.10733495992,73549.1600789965,75990.58504072919,77873.9006789065,79247.34182239165,80163.42515021426,80677.16086376293,80844.22991104354,80719.30842068391,80354.63946272843,79798.90143761178,79096.38824215076,78286.49195130257,77403.46118149722,76476.39650428748,75529.43771636963,74582.09580806612,73649.68423516117,72743.80856716326,71872.87973243784,71042.62299423185,70256.56173971304,69516.46161968716,68822.72620842581,68174.73999742788,67571.15816032364,67010.14518577345,66489.56628393265,66007.13656962695,65560.53355750784,65147.47860886152],[582120.0000000001,526475.1083557021,475590.49525590613,428948.5360614372,387416.05144115427,350075.241239598,316977.6255534807,287767.27319891116,262089.8305946284,239612.36213242193,220006.92260225178,202955.43013323846,188154.52679121192,175319.6576879223,164188.03586080033,154520.51173146986,146102.4325099538,138743.62972727782,132277.70032998273,126560.75226020637,121469.77511308121,116900.77681647833,112766.80357970804,108995.93624844096,105529.33385473062,102319.37561985126,99327.93627401127,96524.81620388193,93886.33733443511,91394.10743912174,89033.94939382214,86794.98741143226,84668.87921469533,82649.18115978675,80730.83228243738,78909.74290582392,77182.47365932555,75545.9913705758,73997.48919405564,72534.25943146614,71153.60870288499],[17780.0,23485.271851717047,42450.73554260387,33132.087014331584,28561.292101948944,26277.42300601578,24322.494650137418,22518.499972614816,20849.89563197658,19321.260169226975,17932.69064261456,16680.121599883525,15556.506646910857,14552.868256912958,13659.133476540233,12864.78916666707,12159.376223477833,11532.843320314561,10975.78269032224,10479.570860602262,10036.435918330893,9639.470424246387,9282.606082054639,8960.56317541017,8668.78488993587,8403.364105015346,8160.968129721236,7938.76516646658,7734.354975710558,7545.705229506582,7371.094321053864,7209.06088541195,7058.3599341682575,6917.925273781622,6786.83773176925,6664.298632656833,6549.607928730165,6442.146386037115,6341.3612443055545,6246.754803511563,6157.875434525513],[93.6,93.80587634899116,94.27760306720745,94.49285699493797,94.45436051750417,94.20852180254512,93.8043285649484,93.28605461308645,92.69085575722929,92.04818021880624,91.38017760357391,90.70264581965148,90.02620031715551,89.35745638752451,88.70010010248956,88.05578714447526,87.42485253006856,86.80684125911175,86.20088424157782,85.60594933237438,85.02099718812721,84.44506842341943,83.87732392255442,83.31705527592919,82.7636778061399,82.2167148433018,81.67577889840186,81.14055313378705,80.61077493935343,80.08622236410515,79.56670349795579,79.05204853442564,78.54210407782493,78.0367292163577,77.53579291250995,77.03917232761395,76.54675177497064,76.05842207128796,75.57408012209352,75.09362863028014,74.61697585784195],[207.92000000000002,253.46061911922624,318.6207141229468,397.4337286754557,490.741729887457,600.1632756209422,727.776030749656,875.7230664864269,1045.9066038423337,1239.801529954419,1458.1932914792108,1700.9004063832901,1966.5162455652405,2252.2121371924422,2553.6531379003286,2865.074408128487,3179.547304790185,3489.430482646353,3786.959334268251,4064.889564083044,4317.091451064251,4538.999025632264,4727.851450001458,4882.710895234297,5004.286275597269,5094.6223930140295,5156.724160497578,5194.178283583673,5210.817266470163,5210.450494767239,5196.66982394927,5172.725030630167,5141.45780633529,5105.28057689194,5066.186839161505,5025.781608857994,4985.323021853199,4945.768547659305,4907.821364604937,4871.974107451493,4838.548434105641]],"incidence_rate":[2471.258194338915,633.6830349032147,1154.3191028319002,1252.2697778774602,1302.7121897955392,1337.3702154271127,1353.6444694669087,1353.9196369617239,1341.7876083916165,1320.9165616664275,1294.7713219818531,1266.3777018332248,1238.0524117955551,1211.2882853236435,1186.8619954892981,1165.0566950442105,1145.8724880356751,1129.1701362625245,1114.752084540672,1102.4034159655841],"total_new_infections_by_group":[[21882.974196498144,18991.54826386448,18602.86535882401,18674.286203419026,18153.238840930437,17459.503929439015,16611.38446704903,15707.826920815782,14840.923087679035,14070.626428211766,13423.888059966215,12902.524501429583,12493.162456518869,12175.891762965144,11930.242442730068,11738.449322156683,11586.652124544482,11464.832102316814,11366.147879580038,11286.106054577525],[1417.6813770270212,2923.7848586253904,4465.485236563374,6157.382579406947,7624.654006161976,8904.297387118258,9938.805769693605,10706.850132936655,11219.357992928726,11508.794046721905,11618.459741324625,11594.108134000664,11478.296176994098,11307.151886033593,11109.040705107042,10904.59076772807,10707.572004902137,10526.202277163771,10364.557932681855,10223.875192474377],[27816.381754892504,-8839.554221042798,931.8801960944263,1174.39872016828,1178.9918330186474,1168.6165684779107,1151.276437028948,1130.939369409287,1109.5643216920685,1088.1499239302098,1067.2800213198093,1047.3517116543421,1028.6533184849936,1011.3811005452499,995.637644907248,981.432033438082,968.6895933437935,957.2715553451368,947.0006082664171,937.6868073133282],[18.083891787607385,16.684489749492,15.654967224794408,15.148297940146684,14.914045575681168,14.793462387217524,14.70297337453178,14.606668344147451,14.494086012367418,14.365857210054875,14.225981035645038,14.078455189844252,13.926252614125687,13.771314809010505,13.61484759177805,13.45761332744894,13.300131519404882,13.142791634462238,12.98590748380318,12.829740288789978],[104.4715004146331,191.49653263836436,293.2366323664878,423.37469869818335,582.1049221432997,761.2841236518071,943.1084179411894,1102.7045620564431,1216.440798165666,1272.3733641877784,1275.2771463602185,1242.2031728729494,1192.8075521017731,1141.9009290094161,1097.3845044497823,1061.835506742799,1034.9407298196256,1015.2926425333249,1001.3276259619814,991.6831295679251]],"total_new_infections_by_group_per_pop":[[837.0861190179485,744.3802903601173,744.2028042223812,759.6447731994411,748.5518021877541,727.9383610583261,698.8585764498187,665.800550664761,633.0146111959641,603.374610766128,578.2957289047554,558.0544349434276,542.2169162893045,530.0216882381785,520.6499434811035,513.3779774792565,507.63780314768866,503.0202274348316,499.24951013825705,496.1491809434478],[54.230352384616765,114.59875686676733,178.6405788121119,250.47401769923627,314.40386739703655,371.2464954646088,418.1361081370013,453.82641089249233,478.54284371692614,493.5184772161481,500.51859899648093,501.4633735185587,498.1706096439612,492.2050761020867,484.8117247414203,476.90939407205,469.1232869674084,461.83778499590676,455.25542387032476,449.4523867031019],[1064.0558654979727,-346.4693792361147,37.27962557143483,47.77295580189888,48.61592298234302,48.723081308688045,48.435421712035144,47.936615212084035,47.32659980401945,46.661891007934635,45.97799647296637,45.299605326813065,44.644679217203354,44.02584457868385,43.45080881943871,42.922670493518474,42.440512739257166,42.00034952010319,41.5962905627011,41.22170562461541],[0.691760391311491,0.653954335459223,0.6262729038768875,0.6162123268194017,0.6149831328399046,0.6167832034661436,0.6185696961314294,0.6191262404364355,0.6182208591443143,0.6160346553625506,0.6128495735097986,0.6089152828172817,0.6044145967186232,0.5994711242861491,0.5941681121059398,0.5885651607067871,0.5827092652401057,0.5766408071305141,0.5703962343862281,0.5640089775178513],[3.996332584629278,7.5057727041415765,11.730855429986464,17.222311657196286,24.003192617631854,31.74018686386735,39.67757219198885,46.73983921129139,51.8852361368966,54.561734495822215,54.93842943382046,53.72723684002608,51.76915251668252,49.7074275935355,47.89116256115847,46.43909513996395,45.34312697287051,44.54602835891677,43.98256401780109,43.59544116555611]],"hiv_deaths_by_group":[[124.73750583284331,2285.705785596768,4546.7899716989095,6735.500192262538,8808.357393327216,10507.031387291132,11785.716178452229,12652.668303629453,13152.0576221895,13349.02136474089,13316.628322399061,13125.735693971543,12838.215512729766,12503.456955720369,12157.5883471369,11824.603339797686,11518.54363956301,11246.02978897593,11008.651169723882,10804.94735550282],[96410.11450443389,81789.54738257077,67297.38206600913,54812.506692888914,44540.18543565166,36402.2152978526,30164.21776218534,25512.486102498733,22112.63713760196,19652.78945077071,17867.995928008168,16548.96533079655,15540.265647977774,14732.85678490567,14054.49676414353,13460.21858026152,12924.027418399392,12432.265460763378,11978.670833671787,11560.936007060762],[2956.219055871121,4365.1282236621,4698.215289594423,4235.882625977023,3738.54235931356,3233.8371951346535,2776.8082702099423,2390.781565312795,2078.9050962898586,1833.7380092794185,1643.720807941329,1496.9256346146262,1382.8620067558695,1293.0884541025196,1221.1896714000136,1162.4761380034715,1113.6072059745802,1072.2366559307084,1036.7201401181937,1005.8924736761394],[15.504119075457673,14.59171212956448,14.390070921801692,14.362803358608728,14.349622514179803,14.299299015890167,14.20832947364526,14.087843661011727,13.949602608897973,13.801904902729891,13.64957373526061,13.495078357394181,13.339600536471881,13.183732997932225,13.027844510545581,12.87223241445113,12.71716752678391,12.562896874814278,12.409636622140775,12.257567309204973],[36.58198505519067,46.243129023728386,65.0743189569699,93.63259473355421,133.9404066520567,188.1188364863049,257.38597182468834,340.863898286981,434.6122966088234,531.6073249140954,623.1257704409304,701.1293927407303,760.4445886621938,799.6604275624904,820.5994046678281,827.0067822236452,823.2157770983385,813.2127142923555,800.1734907346035,786.3570645791901]],"total_cost_per_intervention":[110746.44921270851,28666023.55620871,13134373.021725494,846704.139952265,0.0,0.0,6626377.83685386,0.0],"total_cost_per_component":[4838258.58511167,19265819.236083724,7203015.923838568,2427521.3888415997,2766495.787168919,1100921.6155599863,3047525.9541669097,7340662.499285322,54804.21538177085,169067.45958614297,1055836.3055984455,114296.03332999027,0,0,0],"component_names":["Non-counselor Personnel","Counselor Personnel","Overhead (off-site personnel / management)","Condoms","Test Kits","Other Traded Goods","Non-traded Goods","Recurring Services","Facility Utilities","Capital Equipment","Training","Facility Rent"],"total_cost":49384225.00395304,"total_population":[2687342.8,2649400.8149312595,2614184.33531914,2581589.8300668406,2551323.363851657,2524080.590981867,2499703.743828562,2477857.408083737,2458291.9362121616,2440783.097458854,2425114.5729493797,2411080.0759463813,2398486.5839540595,2387156.817275127,2376930.759215174,2367666.2949420502,2359239.1002279106,2351541.934633355,2344483.4961455083,2337986.9822270055,2331988.482303846,2326435.304357106,2321284.3168304143,2316500.367885888,2312054.827185016,2307924.2803957253,2304089.393229671,2300533.9500686973,2297244.0624908167,2294207.5356027232,2291413.3751678905,2288851.415939146,2286512.0509831347,2284386.042620465,2282464.397391134,2280738.2897472046,2279199.021634201,2277838.0075141857,2276646.7765651713,2275616.9856913276,2274740.4385746513],"prop_on_art":[0.2706,0.2767742823578692,0.2810638403718469,0.2948546308465821,0.3080790349303751,0.3181378548117053,0.3265329691938309,0.3336318568548584,0.33928278227534026,0.3433254833718168,0.34567389300390344,0.3463242188044845,0.3453471696088947,0.3428740579199765,0.3390798094199633,0.3341653722570319,0.32834152922488374,0.321815417750708,0.314780364530039,0.3074090874162018,0.29984994872476994,0.29222574042841104,0.28463440008042545,0.2771510580290774,0.2698308740106528,0.26271221423805263,0.2558198305622868,0.24916781422116438,0.24276219441079427,0.23660312831824518,0.2306866822618302,0.22500623568006828,0.21955355568355694,0.2143195948984462,0.2092950637659512,0.20447082350663623,0.1998381396660864,0.1953888297138425,0.19111533216928156,0.18701071942392217,0.18306867187591808],"percent_of_total_pop_by_group":[[0.12737489240300867,0.8228059458435771,1.519835718075542,2.181714407517824,2.8294056932171494,3.445641604842332,4.036928181232044,4.599890606507194,5.133873272723835,5.639708492074556,6.118812784531692,6.573025102428757,7.004473103043435,7.415459018768235,7.808358129684886,8.185532048325413,8.549257844397841,8.901673093654464,9.244736104937582,9.580199996464746,9.909598932873424,10.234244653110846,10.555231368548782,10.873447153969968,11.189590066275413,11.504187389535744,11.817616605943769,12.130126916071362,12.4418603640919,12.752871850706374,13.063147527158472,13.372621249986164,13.681188933523131,13.988720764164011,14.295071337895513,14.600087853020598,14.903616536744455,15.205507511167657,15.505618315115857,15.803816296806595,16.099980081936927],[98.46157326858338,97.65043371855023,96.83724335818499,96.07157042632662,95.36122831366242,94.6760363488933,94.01400704969484,93.37965830915563,92.77296808704065,92.19263356776047,91.636997777289,91.10418500327252,90.59218383396662,90.09891624839703,89.62229992450801,89.16030189674987,88.71098243818228,88.27252882014642,87.8432793453628,87.42173860251478,87.00658521192413,86.59667342773487,86.1910298800041,85.78884655442722,85.3894708960106,84.99239374513068,84.59723569742631,84.20373241901467,83.81171942232807,83.4211167880762,83.03191428522145,82.64415728488717,82.25793378751489,81.87336279330151,81.4905841538134,81.10974995650022,80.73101741982477,80.35454321829296,79.98047911469837,79.60896875050972,79.24014543250159],[1.3024017628119495,1.277089401686014,1.2525115548479615,1.2161368080329424,1.1394079961834958,1.0702619945339187,1.004483157476144,0.941134114459305,0.8810897686109302,0.824994188193689,0.773231581966623,0.7259544809469052,0.6831373101603535,0.6446241131852691,0.610169701412393,0.5794736436173312,0.5522072079738731,0.528033786623502,0.5066236198960845,0.4876637682940593,0.4708642894665581,0.4559615059464077,0.44271913400469337,0.4309279120223964,0.4204042364944336,0.41098819573914486,0.4025412905311916,0.39494404840767694,0.3880936732915111,0.3819018221933679,0.37629256356981405,0.37120054495059035,0.36656937848270577,0.36235024019496637,0.35850067053321616,0.3549835588398231,0.3517662920068227,0.3488200467987349,0.346119205773243,0.34364087791892106,0.3413645067784942],[0.08930754944996225,0.2060127831946037,0.3229302220511992,0.4398558571960554,0.5566365210618797,0.6728893512781439,0.7883888475994604,0.9029911479727595,1.016562889617181,1.1289938703458502,1.2402022088523958,1.3501323833092327,1.4587516954923683,1.5660461639516996,1.6720163147994986,1.7766731787416994,1.8800347101099129,1.9821227560981358,2.082960630110116,2.1825712866071023,2.280976055853965,2.37819387247978,2.4742409181584537,2.5691305930057706,2.662873730577203,2.7554789765082957,2.846953259953329,2.9373022989371527,3.0265310941553403,3.1146443791931295,3.2016470073589627,3.287544265539393,3.3723421133323606,3.456047351241567,3.538667725198292,3.620211976519773,3.7006898470342815,3.7801120488837805,3.858490207767492,3.9358367873538094,4.012165001435107],[0.019342526751704323,0.04365815072559683,0.0674791468403053,0.09072250092658969,0.11332147587501053,0.13517070045227797,0.1561927639975547,0.17632582190504487,0.19550598200745603,0.21366988162547124,0.23075564736032467,0.246703030042531,0.26145405733723953,0.2749544556977529,0.2871559295952738,0.2980192325656483,0.30751779933602025,0.3156415434774378,0.3224002996933841,0.32782634611930095,0.3319755098819351,0.3349265407281521,0.3367786992839375,0.3376477865746611,0.33766107064229817,0.3369516930861428,0.33565314614533376,0.3338943175691735,0.3317954461331541,0.329465159830948,0.3269986166912603,0.3244766546366852,0.3219657871468473,0.31951885109798667,0.3171761125595856,0.3149666551196203,0.3129099043897375,0.3110171748568986,0.30929315664497165,0.30773728741088885,0.3063449773479509]]}'
# exit


# ------------  pre-build arrays  ------------  #




step= 0.5
cycles = Array(0..40)

#arrays

groups = custom.groups
disease_stages = custom.disease_stages
disease_and_treatment_stages = custom.disease_and_treatment_stages
PopulationSizeByGroup = custom.PopulationSizeByGroup
HivPrevalenceAdultsByGroup = custom.HivPrevalenceAdultsByGroup
HivPrevalence15yoByGroup = custom.HivPrevalence15yoByGroup
ProprtionDiseaseStage = custom.ProprtionDiseaseStage
InfectiousnessByDiseaseStage = custom.InfectiousnessByDiseaseStage
HivDeathRateByDiseaseStage= custom.HivDeathRateByDiseaseStage
HivDeathRateByDiseaseStageTx = custom.HivDeathRateByDiseaseStageTx
InitialTreatmentAccessByDiseaseStage = custom.InitialTreatmentAccessByDiseaseStage
TreatmentRecuitingRateByDiseaseStage = custom.TreatmentRecuitingRateByDiseaseStage

# TODO: These don't do anything, think about using Array#map 
PopulationSizeByGroup.each{|item| item = item.to_f } #convert to float
HivPrevalenceAdultsByGroup.each{|item| item = item.to_f }
HivPrevalence15yoByGroup.each{|item| item = item.to_f } #convert to float
ProprtionDiseaseStage.each{|item| item = item.to_f } #convert to float
InfectiousnessByDiseaseStage.each{|item| item = item.to_f } #convert to float
HivDeathRateByDiseaseStage.each{|item| item = item.to_f } #convert to float
HivDeathRateByDiseaseStageTx.each{|item| item = item.to_f } #convert to float
InitialTreatmentAccessByDiseaseStage.each{|item| item = item.to_f } #convert to float
TreatmentRecuitingRateByDiseaseStage.each{|item| item = item.to_f } #convert to float

# ------------  asign variables from custom to global variables  ------------  #

EntryRateGenPop =                               custom.EntryRateGenPop.to_f 
MaturationRate =                                custom.MaturationRate.to_f  
DeathRateGeneralCauses =                        custom.DeathRateGeneralCauses.to_f  
LifeExpectancy =                                custom.LifeExpectancy.to_f 
SwInitiationRate =                              custom.SwInitiationRate.to_f  
SwQuitRate =                                    custom.SwQuitRate.to_f 
EntryRateMsm =                                  custom.EntryRateMsm.to_f 
EntryRateIdu =                                  custom.EntryRateIdu.to_f  
IduInitiationRate =                             custom.IduInitiationRate.to_f   
IduSpontaneousQuitRate  =                       custom.IduSpontaneousQuitRate.to_f   
IduDeathRate  =                                 custom.IduDeathRate.to_f  
IncreaseInInfectiousnessHomosexual =            custom.IncreaseInInfectiousnessHomosexual.to_f 
DiseaseProgressionUntreatedAcuteToEarly =       custom.DiseaseProgressionUntreatedAcuteToEarly.to_f  
DiseaseProgressionUntreatedEarlyToMedium =      custom.DiseaseProgressionUntreatedEarlyToMedium.to_f  
DiseaseProgressionUntreatedMediumToLate =       custom.DiseaseProgressionUntreatedMediumToLate.to_f  
DiseaseProgressionUntreatedLateToAdvanced =     custom.DiseaseProgressionUntreatedLateToAdvanced.to_f  
DiseaseProgressionUntreatedAdvancedToAids =     custom.DiseaseProgressionUntreatedAdvancedToAids.to_f  
DiseaseProgressionTreatedAcuteToEarly =         custom.DiseaseProgressionTreatedAcuteToEarly.to_f 
DiseaseProgressionTreatedEarlyToMedium =        custom.DiseaseProgressionTreatedEarlyToMedium.to_f  
DiseaseProgressionTreatedMediumToLate =         custom.DiseaseProgressionTreatedMediumToLate.to_f  
DiseaseProgressionTreatedLateToAdvanced =       custom.DiseaseProgressionTreatedLateToAdvanced.to_f  
DiseaseProgressionTreatedAdvancedToAids =       custom.DiseaseProgressionTreatedAdvancedToAids.to_f  

GeneralNonSwPartnershipsYearlyUninfected =                custom.GeneralNonSwPartnershipsYearly.to_f  
GeneralNonSwPartnershipsYearlyInfected =                custom.GeneralNonSwPartnershipsYearly.to_f 
GeneralNonSwPartnershipsYearlyTreated =                custom.GeneralNonSwPartnershipsYearly.to_f 

GeneralCondomUseUninfected =                              custom.GeneralCondomUse.to_f  
GeneralCondomUseInfected =    custom.GeneralCondomUse.to_f 
GeneralCondomUseTreated =     custom.GeneralCondomUse.to_f 

GeneralCondomEffectiveness =                    custom.GeneralCondomEffectiveness.to_f  
SwProportionWhoUseServices =                    custom.SwProportionWhoUseServices.to_f  

SwPartnershipsYearlyUninfected =                          custom.SwPartnershipsYearly.to_f  
SwPartnershipsYearlyInfected =                          custom.SwPartnershipsYearly.to_f  
SwPartnershipsYearlyTreated =                          custom.SwPartnershipsYearly.to_f  

SwCondomUseRateUninfected =                               custom.SwCondomUseRate.to_f  
SwCondomUseRateInfected =                               custom.SwCondomUseRate.to_f  
SwCondomUseRateTreated =                               custom.SwCondomUseRate.to_f  

MsmPartnershipsYearlyUninfected =                         custom.MsmPartnershipsYearly.to_f 
MsmPartnershipsYearlyInfected =                         custom.MsmPartnershipsYearly.to_f 
MsmPartnershipsYearlyTreated =                         custom.MsmPartnershipsYearly.to_f 

MsmCondomUseRateUninfected =                              custom.MsmCondomUseRate.to_f  
MsmCondomUseRateInfected =                              custom.MsmCondomUseRate.to_f  
MsmCondomUseRateTreated =                              custom.MsmCondomUseRate.to_f  

TreatmentReductionOfInfectiousness =            custom.TreatmentReductionOfInfectiousness.to_f  
TreatmentQuitRate =                             custom.TreatmentQuitRate.to_f  
PercentOfIduSexPartners =                       custom.PercentOfIduSexPartners.to_f 

IduPartnershipsYearlyUninfected =                         custom.IduPartnershipsYearly.to_f 
IduPartnershipsYearlyInfected =                         custom.IduPartnershipsYearly.to_f
IduPartnershipsYearlyTreated  =                         custom.IduPartnershipsYearly.to_f

IduCondomUseRateUninfected =                              custom.IduCondomUseRate.to_f  
IduCondomUseRateInfected =                              custom.IduCondomUseRate.to_f  
IduCondomUseRateTreated =                              custom.IduCondomUseRate.to_f  

AnnualNumberOfInjections =                      custom.AnnualNumberOfInjections.to_f  

PercentSharedInjectionsUninfected =                       custom.PercentSharedInjections.to_f  
PercentSharedInjectionsInfected =                       custom.PercentSharedInjections.to_f  
PercentSharedInjectionsTreated =                       custom.PercentSharedInjections.to_f  

PercentMaleIdus =                               custom.PercentMaleIdus.to_f  
InfectiousnessInSharedInjection =               custom.InfectiousnessInSharedInjection.to_f 
CircEffectiveness =         custom.CircEffectiveness.to_f



t2 = Time.new

################################################################################################################################################################
######################## Step 2.9: Adjust behavioral and mortality rates by *intervention* for *key group parameters*   ########################################
################################################################################################################################################################


## Use choo to select intervention (for testing purposes): 0= No interventions, 1 = circumcision, 2 = VCT, 3 = Media, 4 = SWP, 5 = NEP, 6 = MMT, 7 = CD4 Monitoring, 8 = VL Monitoring; look right before sections 3.5 and 10 to find circumcision formulas and remove choo
choo=[1,2,3,4,5,6,7,8]
   #choo=[1] 

groups.each_with_index do |group, g|

  for disstage in 0..2

    ##Compute total RRR from all interventions by group and calculate new condom use rate by group. This assumes interventions that do not affect a certain population group have RRR of 0. 
    ## Outcome type 1 = Condom use rate
    
    TotalGroupRrr = intervention_subpopulation_coverage.select{|item| item.SubpopulationId == g && item.HivStatus==disstage && item.RrrTypeId ==1 && choo.include?(item.InterventionId)}.inject(1){|memo, n| memo *(1- n.Rrr.to_f * n.Coverage.to_f) }

    if disstage==0 

      if g==0 
        GeneralCondomUseUninfected = 1 - (1-GeneralCondomUseUninfected) * TotalGroupRrr
      elsif g==2
        SwCondomUseRateUninfected = 1 - (1-SwCondomUseRateUninfected) * TotalGroupRrr
      elsif g==3
        MsmCondomUseRateUninfected = 1 - (1-MsmCondomUseRateUninfected) * TotalGroupRrr
      elsif g==4
        IduCondomUseRateUninfected = 1 - (1-IduCondomUseRateUninfected) * TotalGroupRrr
      end

    elsif disstage==1

      if g==0 
        GeneralCondomUseInfected = 1 - (1-GeneralCondomUseInfected) * TotalGroupRrr
      elsif g==2
        SwCondomUseRateInfected = 1 - (1-SwCondomUseRateInfected) * TotalGroupRrr
      elsif g==3
        MsmCondomUseRateInfected = 1 - (1-MsmCondomUseRateInfected) * TotalGroupRrr
      elsif g==4
        IduCondomUseRateInfected = 1 - (1-IduCondomUseRateInfected) * TotalGroupRrr
      end 

    else

      if g==0 ##|| g==1
        GeneralCondomUseTreated = 1 - (1-GeneralCondomUseTreated) * TotalGroupRrr
      elsif g==2
        SwCondomUseRateTreated = 1 - (1-SwCondomUseRateTreated) * TotalGroupRrr
      elsif g==3
        MsmCondomUseRateTreated = 1 - (1-MsmCondomUseRateTreated) * TotalGroupRrr
      elsif g==4
        IduCondomUseRateTreated = 1 - (1-IduCondomUseRateTreated) * TotalGroupRrr
      end

    end ## disstage

    ##Compute total RRR from all interventions by group and calculate new number of partnerships by group. Not computed for Gen Pop Females, since their partnerships are the "absorbing bucket" for partnerships. This assumes interventions that do not affect a certain population group have RRR of 0. 
    ## Outcome type 2 = # partnerships
        
    TotalGroupRrr = intervention_subpopulation_coverage.select{|item| item.SubpopulationId == g && item.HivStatus==disstage&& item.RrrTypeId ==2 && choo.include?(item.InterventionId)}.inject(1){|memo, n| memo *(1- n.Rrr.to_f * n.Coverage.to_f) }

    if disstage==0   
      if g==0 
        GeneralNonSwPartnershipsYearlyUninfected = GeneralNonSwPartnershipsYearlyUninfected* TotalGroupRrr
      elsif g==2
        SwPartnershipsYearlyUninfected = SwPartnershipsYearlyUninfected * TotalGroupRrr
      elsif g==3
        MsmPartnershipsYearlyUninfected = MsmPartnershipsYearlyUninfected * TotalGroupRrr
      elsif g==4
        IduPartnershipsYearlyUninfected = IduPartnershipsYearlyUninfected * TotalGroupRrr
      end  
    elsif disstage ==1
      if g==0 
        GeneralNonSwPartnershipsYearlyInfected = GeneralNonSwPartnershipsYearlyInfected* TotalGroupRrr
      elsif g==2
        SwPartnershipsYearlyInfected = SwPartnershipsYearlyInfected * TotalGroupRrr
      elsif g==3
        MsmPartnershipsYearlyInfected = MsmPartnershipsYearlyInfected * TotalGroupRrr
      elsif g==4
        IduPartnershipsYearlyInfected = IduPartnershipsYearlyInfected * TotalGroupRrr
      end  
    else 
      if g==0
        GeneralNonSwPartnershipsYearlyTreated = GeneralNonSwPartnershipsYearlyTreated* TotalGroupRrr
      elsif g==2
        SwPartnershipsYearlyTreated = SwPartnershipsYearlyTreated * TotalGroupRrr
      elsif g==3
        MsmPartnershipsYearlyTreated = MsmPartnershipsYearlyTreated * TotalGroupRrr
      elsif g==4
        IduPartnershipsYearlyTreated = IduPartnershipsYearlyTreated * TotalGroupRrr
      end 
    end #disstage



    ##Compute total RRR from all interventions by group and calculate new number of annual injections for IDUs. This assumes interventions that do not affect a certain population group have RRR of 0. 
    ## Outcome type 3 = # injections
      
    TotalGroupRrr = intervention_subpopulation_coverage.select{|item| item.SubpopulationId == g && item.HivStatus==disstage&& item.RrrTypeId ==3 && choo.include?(item.InterventionId)}.inject(1){|memo, n| memo *(1- n.Rrr.to_f * n.Coverage.to_f) }
      
    if g==4 && disstage==0
      AnnualNumberOfRiskyInjectionsUninfected = AnnualNumberOfInjections * PercentSharedInjectionsUninfected * TotalGroupRrr
    elsif g==4&&disstage==1
      AnnualNumberOfRiskyInjectionsInfected = AnnualNumberOfInjections * PercentSharedInjectionsInfected * TotalGroupRrr
    else
      AnnualNumberOfRiskyInjectionsTreated = AnnualNumberOfInjections * PercentSharedInjectionsTreated * TotalGroupRrr
    end 

  end #for each disease stage

  ##Compute total RRR from all interventions and progression rates by group. All disease stages are affected similarly. This assumes interventions that do not affect a certain population group have RRR of 0. 
  ## Outcome type 4 = Disease progression rates
      
  TotalGroupRrr = intervention_subpopulation_coverage.select{|item| item.SubpopulationId == g && item.HivStatus==2&& item.RrrTypeId ==4 && choo.include?(item.InterventionId)}.inject(1){|memo, n| memo *(1- n.Rrr.to_f * n.Coverage.to_f) }

  ## This is a simple fix - if we want differential RRR by group, we should assign a progression rate to each group and modify if accordingly. 

  if g==0
    DiseaseProgressionTreatedAcuteToEarly = DiseaseProgressionTreatedAcuteToEarly * TotalGroupRrr
    DiseaseProgressionTreatedEarlyToMedium = DiseaseProgressionTreatedEarlyToMedium * TotalGroupRrr 
    DiseaseProgressionTreatedMediumToLate = DiseaseProgressionTreatedMediumToLate * TotalGroupRrr  
    DiseaseProgressionTreatedLateToAdvanced = DiseaseProgressionTreatedLateToAdvanced * TotalGroupRrr  
    DiseaseProgressionTreatedAdvancedToAids = DiseaseProgressionTreatedAdvancedToAids * TotalGroupRrr 
  end

  ##Compute total RRR from all interventions and HIV mortality rates by group. All disease stages are affected similarly. This assumes interventions that do not affect a certain population group have RRR of 0. 
  ## Outcome type 5 = Disease mortality rate
      
  TotalGroupRrr = intervention_subpopulation_coverage.select{|item| item.SubpopulationId == g && item.HivStatus==2&& item.RrrTypeId ==5 && choo.include?(item.InterventionId)}.inject(1){|memo, n| memo *(1- n.Rrr.to_f * n.Coverage.to_f) }

  if g==0
    for j in 0..6
      HivDeathRateByDiseaseStageTx[j]=HivDeathRateByDiseaseStageTx[j] * TotalGroupRrr
    end
  end ## if g=0

end #end foreach group

t3 = Time.new


################################################################################################################################################################
################################# Step 3: Compute intial populations, Vary parameters by group and disease stage. ##############################################
################################################################################################################################################################



##one-off global variable
CircCoEff = intervention_subpopulation_coverage.select{|item| item.SubpopulationId == 1 && item.InterventionId == 1}[0].Coverage.to_f 


class EpiSubpopulationCycle

  #the below specifies the different parameters a EpiSubpopulationCycle object can hold
  attr_accessor :DynamicsArray, :TotalDynamics, :SwAndIduDynamics, :TreatmentDynamics, :DiseaseProgressionEntries, :DiseaseProgressionExits, :TotalDiseaseProgressionExits, :Cycle, :InfectiousnessInSharedInjection, :Scr, :Probability, :GroupId, :DiseaseStageId, :DiseaseProgressionUntreatedAcuteToEarly, :DiseaseProgressionTreatedAcuteToEarly, :AnnualNumberOfInjections, :PercentSharedInjections, :IduSpontaneousQuitRate, :Id, :Group, :DiseaseStage, :Population, :Cycle, :Partnerships, :CondomUse, :CompositePartnerships, :Infectiousness, :TreatmentRecuitingRate, :HivDeathRate, :EntryRate, :PopulationSize, :PopulationSizeGenPopMen, :PopulationSizeGenPopWomen, :PopulationSizeSwWomen, :PopulationSizeMsm, :EntryRateGenPop, :MaturationRate, :DeathRateGeneralCauses, :LifeExpectancy, :SwInitiationRate, :SwQuitRate, :EntryRateMsm, :HivPrevalenceAdultsGenPopMen, :HivPrevalenceAdultsGenPopWomen, :HivPrevalenceAdultsSwWomen, :HivPrevalenceAdultsMsm, :HivPrevalence15yoGenPopMen, :HivPrevalence15yoGenPopWomen, :ProprtionDiseaseStageEarly, :ProprtionDiseaseStageMedium, :ProprtionDiseaseStageLate, :ProprtionDiseaseStageAdvanced, :ProprtionDiseaseStageAids, :InfectiousnessEarly, :InfectiousnessMedium, :InfectiousnessLate, :InfectiousnessLate, :InfectiousnessAids, :IncreaseInInfectiousnessHomosexual, :DiseaseProgressionUntreatedEarlyToMedium, :DiseaseProgressionUntreatedMediumToLate, :DiseaseProgressionUntreatedLateToAdvanced, :DiseaseProgressionUntreatedAdvancedToAids, :DiseaseProgressionTreatedEarlyToMedium, :DiseaseProgressionTreatedMediumToLate, :DiseaseProgressionTreatedLateToAdvanced, :DiseaseProgressionTreatedAdvancedToAids, :HivDeathRateUntreatedEarly, :HivDeathRateUntreatedMedium, :HivDeathRateUntreatedLate, :HivDeathRateUntreatedAdvanced, :HivDeathRateUntreatedAids, :HivDeathRateTreatedEarly, :HivDeathRateTreatedMedium, :HivDeathRateTreatedLate, :HivDeathRateTreatedAdvanced, :HivDeathRateTreatedAids, :GeneralNonSwPartnershipsYearly, :GeneralCondomUse, :GeneralCondomEffectiveness, :SwProportionWhoUseServices, :SwPartnershipsYearly, :SwCondomUseRate, :MsmPartnershipsYearly, :MsmCondomUseRate, :TreatmentReductionOfInfectiousness, :InitialTreatmentAccessEarly, :InitialTreatmentAccessMedium, :InitialTreatmentAccessLate, :InitialTreatmentAccessAdvanced, :InitialTreatmentAccessAids, :TreatmentRecuitingRateEarly, :TreatmentRecuitingRateMedium, :TreatmentRecuitingRateLate, :TreatmentRecuitingRateAdvanced, :TreatmentRecuitingRateAids, :TreatmentQuitRate, :PropMaleCirc

end

#this array, subpopulations, will hold all the CGDs 
subpopulations = Array.new
s = 0

groups.each_with_index do |group,g| 

  disease_and_treatment_stages.each_with_index do |disease_stage,d|

    this_subpopulation = EpiSubpopulationCycle.new
    
    this_subpopulation.Cycle = 0 #this first array, subpopulations, will hold all the data for the 0th cycle
    
    # --- fill in their populations ---
    
    #uninfected
    
    if d==0 
      this_subpopulation.Population = PopulationSizeByGroup[g]*(1-HivPrevalenceAdultsByGroup[g])
    end
    
    #acute to aids, no treatment 
    
    if  d>0 and d<7
      this_subpopulation.Population  = PopulationSizeByGroup[g]*HivPrevalenceAdultsByGroup[g]*ProprtionDiseaseStage[d]*(1-InitialTreatmentAccessByDiseaseStage[d])
    end
    
    #treatment

    if d>6
      ds = d - 6;
      this_subpopulation.Population = PopulationSizeByGroup[g]*HivPrevalenceAdultsByGroup[g]*ProprtionDiseaseStage[ds]*(InitialTreatmentAccessByDiseaseStage[ds])
    end

    # ------------------------------- basic info -------------------------------
    
    this_subpopulation.Id = s
    this_subpopulation.Group = group
    this_subpopulation.GroupId = g
    this_subpopulation.DiseaseStage = disease_stage
    this_subpopulation.DiseaseStageId = d
    
    # ------------------------------- these do not vary  -------------------------------

    this_subpopulation.MaturationRate = MaturationRate
    this_subpopulation.DeathRateGeneralCauses = DeathRateGeneralCauses  #idus override below
    this_subpopulation.InfectiousnessInSharedInjection = 0.0 #idus override below
    this_subpopulation.GeneralCondomEffectiveness = GeneralCondomEffectiveness

    
     # ------------------------------- these vary by GROUP and DISEASE STAGE-------------------------------

    #gen pop male

    if g==0
      if d==0
        this_subpopulation.Partnerships = GeneralNonSwPartnershipsYearlyUninfected
        this_subpopulation.CondomUse = GeneralCondomUseUninfected
      elsif d>0 && d<7
        this_subpopulation.Partnerships = GeneralNonSwPartnershipsYearlyInfected
        this_subpopulation.CondomUse = GeneralCondomUseInfected
      elsif d>6
        this_subpopulation.Partnerships = GeneralNonSwPartnershipsYearlyTreated
        this_subpopulation.CondomUse = GeneralCondomUseTreated
      end
    end

    #gen pop female

    if g==1
      this_subpopulation.SwInitiationRate = SwInitiationRate
      if d==0
        this_subpopulation.Partnerships = GeneralNonSwPartnershipsYearlyUninfected
        this_subpopulation.CondomUse = GeneralCondomUseUninfected
      elsif d>0 && d<7
        this_subpopulation.Partnerships = GeneralNonSwPartnershipsYearlyInfected
        this_subpopulation.CondomUse = GeneralCondomUseInfected
      elsif d>6
       this_subpopulation.Partnerships = GeneralNonSwPartnershipsYearlyTreated
       this_subpopulation.CondomUse = GeneralCondomUseTreated
        #genpop females are not assigned partners -- they get assigned the "remaining" partnerships from males
     end
    end

    #sws

    if g==2
      this_subpopulation.SwQuitRate = SwQuitRate
      if d==0
        this_subpopulation.Partnerships = SwPartnershipsYearlyUninfected
        this_subpopulation.CondomUse = SwCondomUseRateUninfected
      elsif d>0 && d<7
        this_subpopulation.Partnerships = SwPartnershipsYearlyInfected
        this_subpopulation.CondomUse = SwCondomUseRateInfected
      elsif d>6
       this_subpopulation.Partnerships = SwPartnershipsYearlyTreated
       this_subpopulation.CondomUse = SwCondomUseRateTreated
     end
    end

    #msm

    if g==3
      if d==0
        this_subpopulation.Partnerships = MsmPartnershipsYearlyUninfected
        this_subpopulation.CondomUse = MsmCondomUseRateUninfected
      elsif d>0 && d<7
        this_subpopulation.Partnerships = MsmPartnershipsYearlyInfected
        this_subpopulation.CondomUse = MsmCondomUseRateInfected
      elsif d>6
       this_subpopulation.Partnerships = MsmPartnershipsYearlyTreated
       this_subpopulation.CondomUse = MsmCondomUseRateTreated
     end
    end

    #idu
    
    if g==4
      this_subpopulation.IduSpontaneousQuitRate = IduSpontaneousQuitRate
      if d==0
        this_subpopulation.Partnerships = IduPartnershipsYearlyUninfected
        this_subpopulation.CondomUse = IduCondomUseRateUninfected
        #needle sharing
        this_subpopulation.AnnualNumberOfInjections = AnnualNumberOfRiskyInjectionsUninfected
        this_subpopulation.PercentSharedInjections = PercentSharedInjectionsUninfected
      elsif d>0 && d<7
        this_subpopulation.Partnerships = IduPartnershipsYearlyInfected
        this_subpopulation.CondomUse = IduCondomUseRateInfected
        #needle sharing
        this_subpopulation.AnnualNumberOfInjections = AnnualNumberOfRiskyInjectionsInfected
        this_subpopulation.PercentSharedInjections = PercentSharedInjectionsInfected
      elsif d>6
        this_subpopulation.Partnerships = IduPartnershipsYearlyTreated
        this_subpopulation.CondomUse = IduCondomUseRateTreated
        #needle sharing
        this_subpopulation.AnnualNumberOfInjections = AnnualNumberOfRiskyInjectionsTreated
        this_subpopulation.PercentSharedInjections = PercentSharedInjectionsTreated
      end
      this_subpopulation.DeathRateGeneralCauses = IduDeathRate
    end
       
    this_subpopulation.CompositePartnerships = (this_subpopulation.CondomUse) * (this_subpopulation.Partnerships) * (1-GeneralCondomEffectiveness) + (1-this_subpopulation.CondomUse) * (this_subpopulation.Partnerships)

    # ------------------------------- these vary by DISEASE STAGE -------------------------------
    
    # uninfected
    if d==0
      this_subpopulation.Infectiousness = 0
      this_subpopulation.HivDeathRate = 0
      this_subpopulation.InfectiousnessInSharedInjection = 0.0
    end
    #acute to aids, no treatment
    if d>0 && d<7
      this_subpopulation.Infectiousness = InfectiousnessByDiseaseStage[d]
      this_subpopulation.TreatmentRecuitingRate = TreatmentRecuitingRateByDiseaseStage[d]
      this_subpopulation.HivDeathRate = HivDeathRateByDiseaseStage[d]
      this_subpopulation.InfectiousnessInSharedInjection = InfectiousnessInSharedInjection
    end
    # early to aids, with treatment
    if d>6
      ds = d - 6;
      this_subpopulation.Infectiousness = InfectiousnessByDiseaseStage[ds]*(1-TreatmentReductionOfInfectiousness)
      this_subpopulation.TreatmentQuitRate = TreatmentQuitRate
      this_subpopulation.HivDeathRate = HivDeathRateByDiseaseStageTx[ds]
      this_subpopulation.InfectiousnessInSharedInjection = InfectiousnessInSharedInjection / 2.0
    end
    #acute
    if d==0
      this_subpopulation.DiseaseProgressionExits = 0
    end
    if d==1
      this_subpopulation.DiseaseProgressionUntreatedAcuteToEarly = DiseaseProgressionUntreatedAcuteToEarly
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionUntreatedAcuteToEarly
    end
    #eerly
    if d==2
      this_subpopulation.DiseaseProgressionUntreatedEarlyToMedium = DiseaseProgressionUntreatedEarlyToMedium
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionUntreatedEarlyToMedium
    end
    #medium
    if d==3 
      this_subpopulation.DiseaseProgressionUntreatedMediumToLate = DiseaseProgressionUntreatedMediumToLate
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionUntreatedMediumToLate
    end
    #late
    if d==4
      this_subpopulation.DiseaseProgressionUntreatedLateToAdvanced = DiseaseProgressionUntreatedLateToAdvanced
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionUntreatedLateToAdvanced
    end
    #advanced
    if d==5
      this_subpopulation.DiseaseProgressionUntreatedAdvancedToAids = DiseaseProgressionUntreatedAdvancedToAids
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionUntreatedAdvancedToAids
    end
    if d==6
      # aids, 6, has no transition
      this_subpopulation.DiseaseProgressionExits = 0.0
    end
    if d==7
      this_subpopulation.DiseaseProgressionTreatedAcuteToEarly = DiseaseProgressionTreatedAcuteToEarly
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionTreatedAcuteToEarly
    end
    if d==8
      this_subpopulation.DiseaseProgressionTreatedEarlyToMedium = DiseaseProgressionTreatedEarlyToMedium
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionTreatedEarlyToMedium
    end
    if d==9
      this_subpopulation.DiseaseProgressionTreatedMediumToLate = DiseaseProgressionTreatedMediumToLate
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionTreatedMediumToLate
    end
    if d==10
      this_subpopulation.DiseaseProgressionTreatedLateToAdvanced = DiseaseProgressionTreatedLateToAdvanced
      this_subpopulation.DiseaseProgressionExits = DiseaseProgressionTreatedLateToAdvanced
    end
    if d==11
     this_subpopulation.DiseaseProgressionTreatedAdvancedToAids = DiseaseProgressionTreatedAdvancedToAids
     this_subpopulation.DiseaseProgressionExits = DiseaseProgressionTreatedAdvancedToAids
   end
   if d==12
      this_subpopulation.DiseaseProgressionExits = 0.0
      # treated aids, 12, has no transition
    end

    # --- these vary by both group and disease stage, they are one-off ones ---

    # MSM men enter through uninfected group

    if g == 3 && d == 0
      this_subpopulation.EntryRateMsm = EntryRateMsm
      this_subpopulation.EntryRate = EntryRateMsm #note ask Sabina why there are two MSM entry numbers
    elsif g == 4 && d == 0
      this_subpopulation.EntryRate = EntryRateIdu
    else
      this_subpopulation.EntryRate = 0    
    end
    # msm more infectios (anal sex)
    if g == 3
      this_subpopulation.Infectiousness = this_subpopulation.Infectiousness * ( 1 + IncreaseInInfectiousnessHomosexual )
    end
    #entry rates for genpop men and women
    if g==0 && d==0 || g==1 && d==0
      this_subpopulation.EntryRate = EntryRateGenPop/2
    end
    # determine proportion of circumcised men in initial step
    if choo.include?(1)
     this_subpopulation.PropMaleCirc= step *  intervention_subpopulation_coverage.select{|item| item.SubpopulationId == 1 && item.InterventionId == 1}[0].Coverage.to_f  
     ##changed from sabina's code, which used the item's ID -- not good as this changes by country. So, instead grab subpop 1 (genpop men) and intervention 1 (MC)
    else
      this_subpopulation.PropMaleCirc=0
    end
    # add subpopulation to subpopulations array
    subpopulations << this_subpopulation
    s = s + 1
    subpopulations.g(0).compact.inject(0){|memo, n| memo + n.Population }

  end #disease and treatment stages
  
end #groups



t4 = Time.new



################################################################################################################################################################
############################################# Step 4: Calculate partnerships per female and per male client of sex #############################################
################################################################################################################################################################

cycles.each_with_index do |cycle,c|

  ts0 = Time.new

  #determine average risky partnerships for women from men

  total_men = subpopulations.g(0).c(c).compact.inject(0){|memo, n| memo + n.Population }
  total_women = subpopulations.g(1).c(c).compact.inject(0){|memo, n| memo + n.Population }
  total_men_partnerships = subpopulations.g(0).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships) }
  total_idus = subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + n.Population }
  ##total_male_idus = total_idus * PercentMaleIdus
  ##total_female_idus = total_idus * (1-PercentMaleIdus)
  total_men_partnerships_lost_to_idu = (1-PercentOfIduSexPartners) * (1-PercentMaleIdus) * subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships)}
  total_partnerships_offered_to_gp_women_from_men = total_men_partnerships - total_men_partnerships_lost_to_idu
  average_number_of_parternships_for_women_from_men = total_partnerships_offered_to_gp_women_from_men / total_women
  ##average_number_of_risky_parternships_for_women_from_men = average_number_of_parternships_for_women_from_men * (1-GeneralCondomUse + GeneralCondomUse*(1-GeneralCondomEffectiveness)) 
  ##Include condom use in SCR computation (varies by uninfected/infected/treated)

  #determine average risky partnerships for women from idu

  total_partnerships_offered_from_idus_to_females = (1-PercentOfIduSexPartners) * PercentMaleIdus * subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships)}
  average_partnerships_from_idus_to_female = total_partnerships_offered_from_idus_to_females / total_women
  ##average_risky_partnerships_from_idus_to_female = average_partnerships_from_idus_to_female * (1-IduCondomUseRate+IduCondomUseRate*(1-GeneralCondomEffectiveness))
  ##Include condom use in SCR computation (varies by uninfected/infected/treated)
  
  #determine average sex worker partnerships per sw client

  total_sws = subpopulations.g(2).c(c).compact.inject(0){|memo, n| memo + n.Population }
  total_male_clients = total_men * SwProportionWhoUseServices
  total_sw_partnerships_offered = subpopulations.g(2).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships) }
  average_sw_partnerships_per_using_male = total_sw_partnerships_offered / total_male_clients


  ts1 = Time.new

  partnership_time += ts1 - ts0

  ################################################################################################################################################################
  ############################################# # Step 5: Calculate proportion of people in each disease state per group, ie "probability tab" ###################
  ################################################################################################################################################################

   subpopulations.c(c).compact.each_with_index do |this_subpopulation,s|
     this_subpopulation.Probability = this_subpopulation.Population / subpopulations.g(this_subpopulation.GroupId).c(c).compact.inject(0){|memo, n| memo + n.Population }
   end

  ################################################################################################################################################################
  ############################################# # Step 6: Calculate sufficient contact rate from each disease state to each ######################################
  ################################################################################################################################################################

  # in order to calculate the SCR for a certain subpop, you're finding the chance that the uninfected subpopulation in question might be infected by the particular disease state from a different
  # group. For example, the SCR assigned under acute male gen pop is the chance that an uninfected genpop men will be infected by an acute SW, IDU, or genpop woman. Therefore, I've assigned
  # "mate" subpopulations designating which subpops the SCR refers to. In the above sample, acute GP M has a SW, IDU and genpop women mate groups.


  subpopulations.c(c).compact.each_with_index do |this_subpopulation,s|

    ts2 = Time.new

    if this_subpopulation.GroupId == 0

      # SCR GenPopMen

      total_men_partnerships = subpopulations.g(0).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships) }
      total_female_idu_partnerships = (1-PercentOfIduSexPartners) * (1-PercentMaleIdus) * subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + (n.Population) *(n.Partnerships)}
      probability_of_choosing_idu_partner = total_female_idu_partnerships / total_men_partnerships
      probability_of_choosing_non_idu_partner = 1 - probability_of_choosing_idu_partner

      genpop_female_mate = subpopulations.g(1).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      idu_mate = subpopulations.g(4).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      sw_mate = subpopulations.g(2).d(this_subpopulation.DiseaseStageId).c(c).compact[0]

      #Need to multiply by partnerships for uninfected men
      uninfected_men=subpopulations.g(0).d(0).c(c).compact[0]

      scr_for_males_from_genpop_females = probability_of_choosing_non_idu_partner * genpop_female_mate.Probability * uninfected_men.CompositePartnerships * genpop_female_mate.Infectiousness
      scr_for_males_from_idu_females = probability_of_choosing_idu_partner  * idu_mate.Probability * uninfected_men.CompositePartnerships * idu_mate.Infectiousness
      scr_for_males_from_sws = sw_mate.Probability * average_sw_partnerships_per_using_male *(1-sw_mate.CondomUse * GeneralCondomEffectiveness) * sw_mate.Infectiousness * SwProportionWhoUseServices

      total_scr_male = scr_for_males_from_genpop_females + scr_for_males_from_idu_females + scr_for_males_from_sws

      #include circumcision effects
      this_subpopulation.Scr = total_scr_male * (1-this_subpopulation.PropMaleCirc.to_f * CircEffectiveness.to_f)

    end

    if this_subpopulation.GroupId == 1

      #scr genpop women

      #from idu males + genpop males

      total_male_idu_partnerships =  (1-PercentOfIduSexPartners) * PercentMaleIdus * subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + (n.Population) *(n.Partnerships)}
      total_female_idu_partnerships =  (1-PercentOfIduSexPartners)*(1-PercentMaleIdus )* subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships)}
      male_idu_partnerships_offered_to_females = (1-PercentOfIduSexPartners) * PercentMaleIdus * subpopulations.g(4).c(c).compact.inject(0){|memo, n| memo + (n.Population) * (n.Partnerships)}
      total_female_partnerships = total_men_partnerships - total_female_idu_partnerships + male_idu_partnerships_offered_to_females
      probability_of_choosing_idu_partner = total_male_idu_partnerships / total_female_partnerships
      probability_of_choosing_non_idu_partner = ( 1 - probability_of_choosing_idu_partner )

      male_mate = subpopulations.g(0).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      idu_mate = subpopulations.g(4).d(this_subpopulation.DiseaseStageId).c(c).compact[0]

      src_for_females_from_male = probability_of_choosing_non_idu_partner * male_mate.Probability * average_number_of_parternships_for_women_from_men *(1-(this_subpopulation.CondomUse) *GeneralCondomEffectiveness) * male_mate.Infectiousness
      src_for_females_from_idu_male = probability_of_choosing_idu_partner * idu_mate.Probability * average_partnerships_from_idus_to_female *(1-(idu_mate.CondomUse)*GeneralCondomEffectiveness)* idu_mate.Infectiousness 
      total_src_for_females = src_for_females_from_male + src_for_females_from_idu_male

      this_subpopulation.Scr = total_src_for_females

    end

    if this_subpopulation.GroupId == 2

      #=Probability!B4*('By group'!AB$25+'By group'!AB$26)*'By group'!B$23

      male_mate = subpopulations.g(0).d(this_subpopulation.DiseaseStageId).c(c).compact[0]

      #need to use partnerships per uninfected SW
      uninfected_sw=subpopulations.g(2).d(0).c(c).compact[0]

      src_for_sw_from_male = male_mate.Probability * uninfected_sw.CompositePartnerships * male_mate.Infectiousness

      this_subpopulation.Scr = src_for_sw_from_male

    end

    if this_subpopulation.GroupId == 3 

      #=Probability!AO5*('By group'!$AO$26+'By group'!$AO$25)*'By group'!AO$23
      #Need to use number of partnerships for uninfected MSM
      uninfected_msm=subpopulations.g(3).d(0).c(c).compact[0]
      msm_mate = subpopulations.g(3).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      src_for_msm_from_msm = msm_mate.Probability * uninfected_msm.CompositePartnerships * msm_mate.Infectiousness
      this_subpopulation.Scr = src_for_msm_from_msm  

    end 

    if this_subpopulation.GroupId == 4 

        #=prop_idu_part*Probability!BB4*'By group'!$BB$24*'By group'!BB$23+  Probability!BB4*'By group'!$BB$30*'By group'!BB$31

        #Probability!BC4*('By group'!$BB$26+'By group'!$BB$25)*'By group'!BC$23 + Probability!BC4*'By group'!$BB$30*'By group'!BC$31
        uninfected_idu=subpopulations.g(4).d(0).c(c).compact[0]

        scr_from_sex = PercentOfIduSexPartners * this_subpopulation.Probability * uninfected_idu.CompositePartnerships * this_subpopulation.Infectiousness 
        scr_from_needle_sharing = this_subpopulation.Probability * uninfected_idu.AnnualNumberOfInjections * this_subpopulation.InfectiousnessInSharedInjection
        # Annualnumberofinjecitons already includes percentake shared (computed in section 3 as risky injections)

        this_subpopulation.Scr = scr_from_sex + scr_from_needle_sharing

      end


      ts3 = Time.new
      scr_time += ts3 - ts2

  end #subpopulation

  ################################################################################################################################################################
  ########################################################### Step 8: Develop dynamics for year 0 to year 1 ######################################################
  ################################################################################################################################################################

  subpopulations.c(c).compact.each_with_index do |this_subpopulation,s|


    ts4 = Time.new

    #General/IDU death rate, maturation, HIV death rate, entry

    total_population = subpopulations.c(c).compact.inject(0){|memo, n| memo + n.Population }
    general_deaths = step * ((-this_subpopulation.MaturationRate + -this_subpopulation.DeathRateGeneralCauses + -this_subpopulation.HivDeathRate) * this_subpopulation.Population + this_subpopulation.EntryRate * total_population)
    
    #subpopulations.select{|item| item.GroupId == this_subpopulation.GroupId}.each{|thing| print thing.Id, thing.DiseaseProgressionExits}


    #-------Disease progression exits

    if this_subpopulation.DiseaseStageId == 0.0
      total_scr = subpopulations.g(this_subpopulation.GroupId).c(c).compact.inject(0){|memo, n| memo + n.Scr.to_f }
      disease_progression_exits = step * -total_scr * this_subpopulation.Population
    else
      #=step*-SUM('By group'!C$11:C$21)*Population!C4
      disease_progression_exits = step * -this_subpopulation.DiseaseProgressionExits * this_subpopulation.Population
    end

    this_subpopulation.TotalDiseaseProgressionExits = disease_progression_exits

    #--------Disease progression entries


    if this_subpopulation.DiseaseStageId == 0 
      disease_progression_entries = 0.0
    else
      from = subpopulations.g(this_subpopulation.GroupId).d(this_subpopulation.DiseaseStageId - 1).c(c).compact[0]
      disease_progression_entries = -from.TotalDiseaseProgressionExits
    end

    this_subpopulation.DiseaseProgressionEntries = disease_progression_entries


    #--------Treatment dynamics


    if this_subpopulation.DiseaseStageId == 0 
      treatment_dynamics = 0.0
    elsif this_subpopulation.DiseaseStageId > 0 && this_subpopulation.DiseaseStageId < 7
      treated_pop = subpopulations.g(this_subpopulation.GroupId).d(this_subpopulation.DiseaseStageId + 6).c(c).compact.first
      treatment_dynamics = step * (-this_subpopulation.Population * TreatmentRecuitingRateByDiseaseStage[this_subpopulation.DiseaseStageId] + treated_pop.Population * TreatmentQuitRate)
    else
      untreated_pop = subpopulations.g(this_subpopulation.GroupId).d(this_subpopulation.DiseaseStageId + -6).c(c).compact.first
      treatment_dynamics = -untreated_pop.TreatmentDynamics
    end

    this_subpopulation.TreatmentDynamics = treatment_dynamics

    #-----SW and IDU dynamics   

    if this_subpopulation.GroupId == 0

      idu_mate_total = subpopulations.g(4).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      total_unif_male_idus = idu_mate_total.Population * PercentMaleIdus
      sw_and_idu_dynamics = step * (total_unif_male_idus * IduSpontaneousQuitRate - this_subpopulation.Population * IduInitiationRate)

    elsif this_subpopulation.GroupId == 1

      idu_mate_total = subpopulations.g(4).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      sw_mate = subpopulations.g(2).d(this_subpopulation.DiseaseStageId).c(c).compact.first 
      total_unif_female_idus = idu_mate_total.Population * (1-PercentMaleIdus)
      sw_and_idu_dynamics = step * (total_unif_female_idus * IduSpontaneousQuitRate - this_subpopulation.Population * IduInitiationRate + sw_mate.Population * SwQuitRate - this_subpopulation.Population * SwInitiationRate)

    elsif this_subpopulation.GroupId == 2

      genpop_female = subpopulations.g(1).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      sw_and_idu_dynamics = step * (genpop_female.Population * SwInitiationRate - this_subpopulation.Population * SwQuitRate) 

    elsif this_subpopulation.GroupId == 3

      sw_and_idu_dynamics = 0.0

    elsif this_subpopulation.GroupId == 4

      genpop_male = subpopulations.g(0).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      genpop_female = subpopulations.g(1).d(this_subpopulation.DiseaseStageId).c(c).compact[0]
      sw_and_idu_dynamics =  step * (IduInitiationRate * genpop_female.Population + IduInitiationRate * genpop_male.Population - this_subpopulation.Population * IduSpontaneousQuitRate)

    end #if groups

    this_subpopulation.SwAndIduDynamics = sw_and_idu_dynamics

    dynamics_array = [general_deaths, disease_progression_exits, disease_progression_entries, treatment_dynamics, sw_and_idu_dynamics]

    this_subpopulation.DynamicsArray = dynamics_array

    this_subpopulation.TotalDynamics = sw_and_idu_dynamics + treatment_dynamics + disease_progression_entries + disease_progression_exits + general_deaths


    ts5 = Time.new

    dynamics_times += ts5 - ts4

    end #subpopulations

    #Step 9, build next cycle, populate each subpop

    

    ts6 = Time.new

    subpopulations.c(c).compact.each_with_index do |this_subpopulation,s| 
      new_subpopulation = this_subpopulation.clone
      new_subpopulation.Cycle = this_subpopulation.Cycle + 1
      new_subpopulation.Id = this_subpopulation.Id + 65
      new_subpopulation.Population = this_subpopulation.Population + this_subpopulation.TotalDynamics
      if choo.include?(1)
        new_subpopulation.PropMaleCirc= this_subpopulation.PropMaleCirc.to_f + step * CircCoEff * (1-this_subpopulation.PropMaleCirc.to_f) 
      else 
        new_subpopulation.PropMaleCirc= this_subpopulation.PropMaleCirc.to_f 
      end
      subpopulations = subpopulations.push(new_subpopulation)
    end # subpopulations




    ts7 = Time.new

    adding_time += ts7 - ts6

end #cycles


# CSV.open("file.csv", "wb") do |csv|
#   
#   csv << [ "Id" , "Cycle", "Population" , "Group", "DiseaseStage",  "Scr", "Probability", "CondomUse", "Partnerships","PropMaleCirc" ] 
# 
#   subpopulations.each_with_index do |this_subpopulation,s| 
#     
#     csv << [ this_subpopulation.Id , this_subpopulation.Cycle,this_subpopulation.Population , this_subpopulation.Group, this_subpopulation.DiseaseStage,  this_subpopulation.Scr, this_subpopulation.Probability, this_subpopulation.CondomUse, this_subpopulation.Partnerships, this_subpopulation.PropMaleCirc]
#  
#  end
#  
# end

t5 = Time.new


################################################################################################################################################################
############################################### Step 9.9: Cost Data                                                     ########################################
################################################################################################################################################################


#need 'interventions' variable

components = CostInputs.select{|item| item.InterventionId == 1}
total_cost_per_intervention = Array.new
total_cost_per_component = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

Array(1..8).each_with_index  do |interventionId, i|
  total_cost_per_intervention[i] = 0
  groups.each_with_index do |group, g|
    components.each_with_index do |component, c|
      cost = intervention_subpopulation_coverage.select{|item| item.InterventionId == interventionId && item.SubpopulationId == g}[0].Coverage.to_f * CostInputs.select{|item| item.InterventionId == interventionId && item.ComponentId == component.ComponentId}.sum('CostPerClient').to_f * PopulationSizeByGroup[g]
      total_cost_per_intervention[i] += cost
      total_cost_per_component[c] += cost
    end
  end
end

#get component names
component_names = Array.new()
components.each{ |item| component_names.push( item.ComponentName )}



total_cost = total_cost_per_intervention.sum

#IRB.start_session(binding)

################################################################################################################################################################
############################################### Step 10: Build chart functions to format data into correct arrays (ie, ########################################
################################################################################################################################################################

#class EpiOutputs

  #the below specifies the different parameters a EpiSubpopulation object can hold
  #attr_accessor :total_prevalence, :prevalence_by_group, :total_new_infections, :total_new_infections_per_pop, :total_new_infections_by_group, :total_new_infections_by_group_per_pop, :cumulative_total_new_infections, :hiv_deaths, :cumulative_hiv_deaths, :hiv_deaths_by_group
  
#end

epi_outputs = Hash.new
epi_outputs['total_prevalence'] = Array.new
epi_outputs['total_new_infections']= Array.new
epi_outputs['total_new_infections_per_pop'] = Array.new
epi_outputs['cumulative_total_new_infections'] = Array.new
epi_outputs['hiv_deaths'] = Array.new
epi_outputs['cumulative_hiv_deaths'] = Array.new
epi_outputs['prevalence_by_group'] = Array.new
epi_outputs['prevalence_by_group'][0] = Array.new
epi_outputs['prevalence_by_group'][1] = Array.new
epi_outputs['prevalence_by_group'][2] = Array.new
epi_outputs['prevalence_by_group'][3] = Array.new
epi_outputs['prevalence_by_group'][4] = Array.new
epi_outputs['total_plwa'] = Array.new
epi_outputs['plwa_by_group'] = Array.new
epi_outputs['plwa_by_group'][0] = Array.new
epi_outputs['plwa_by_group'][1] = Array.new
epi_outputs['plwa_by_group'][2] = Array.new
epi_outputs['plwa_by_group'][3] = Array.new
epi_outputs['plwa_by_group'][4] = Array.new
epi_outputs['incidence_rate'] = Array.new
epi_outputs['total_new_infections_by_group'] = Array.new
epi_outputs['total_new_infections_by_group'][0] = Array.new
epi_outputs['total_new_infections_by_group'][1] = Array.new
epi_outputs['total_new_infections_by_group'][2] = Array.new
epi_outputs['total_new_infections_by_group'][3] = Array.new
epi_outputs['total_new_infections_by_group'][4] = Array.new
epi_outputs['total_new_infections_by_group_per_pop'] = Array.new
epi_outputs['total_new_infections_by_group_per_pop'][0] = Array.new
epi_outputs['total_new_infections_by_group_per_pop'][1] = Array.new
epi_outputs['total_new_infections_by_group_per_pop'][2] = Array.new
epi_outputs['total_new_infections_by_group_per_pop'][3] = Array.new
epi_outputs['total_new_infections_by_group_per_pop'][4] = Array.new
epi_outputs['hiv_deaths_by_group'] = Array.new
epi_outputs['hiv_deaths_by_group'][0] = Array.new
epi_outputs['hiv_deaths_by_group'][1] = Array.new
epi_outputs['hiv_deaths_by_group'][2] = Array.new
epi_outputs['hiv_deaths_by_group'][3] = Array.new
epi_outputs['hiv_deaths_by_group'][4] = Array.new
epi_outputs['total_cost_per_intervention'] = total_cost_per_intervention
epi_outputs['total_cost_per_component'] = total_cost_per_component
epi_outputs['component_names'] = component_names
epi_outputs['total_cost'] = total_cost
epi_outputs['total_population'] = Array.new
epi_outputs['prop_on_art'] = Array.new
epi_outputs['percent_of_total_pop_by_group'] = Array.new
epi_outputs['percent_of_total_pop_by_group'][0] = Array.new
epi_outputs['percent_of_total_pop_by_group'][1] = Array.new
epi_outputs['percent_of_total_pop_by_group'][2] = Array.new
epi_outputs['percent_of_total_pop_by_group'][3] = Array.new
epi_outputs['percent_of_total_pop_by_group'][4] = Array.new



cycles.each_with_index do |this_cycle,c|


  #------- Total prevalence and plwa -------#
  
  total_infected = subpopulations.select{|item| item.Cycle == c && item.DiseaseStageId != 0}.inject(0){|memo, n| memo + n.Population }
  total_on_art = subpopulations.select{|item| item.Cycle == c && item.DiseaseStageId > 7}.inject(0){|memo, n| memo + n.Population }

  total_pop = subpopulations.select{|item| item.Cycle == c }.inject(0){|memo, n| memo + n.Population }
  epi_outputs.total_plwa[c] = total_infected
  epi_outputs.total_prevalence[c] = total_infected / total_pop 
  epi_outputs.total_population[c] = total_pop

  total_suspt = total_pop - total_infected


  #prop on ART
  epi_outputs.prop_on_art[c] = total_on_art / total_infected
  

  #------- Total incidence -------#
  
  if c.even? && c !=0
    new_infections = subpopulations.select{|item| item.Cycle == c-1 && item.DiseaseStageId == 0}.inject(0){|memo, n| memo - n.TotalDiseaseProgressionExits } + subpopulations.select{|item| item.Cycle == c-2 && item.DiseaseStageId == 0}.inject(0){|memo, n| memo - n.TotalDiseaseProgressionExits }
    
    incidence_rate = new_infections / total_suspt

    total_old_pop = subpopulations.select{|item| item.Cycle == c-2 }.inject(0){|memo, n| memo + n.Population }
    epi_outputs.total_new_infections.push new_infections
    epi_outputs.incidence_rate.push incidence_rate * 100_000
    epi_outputs.total_new_infections_per_pop.push new_infections / total_old_pop * 100_000
    if epi_outputs.cumulative_total_new_infections.empty?
      epi_outputs.cumulative_total_new_infections.push new_infections
    else
      epi_outputs.cumulative_total_new_infections.push epi_outputs.cumulative_total_new_infections.last + new_infections
    end
  end
  
  #------- Total HIV deaths -------#

  if c.even? && c !=0
    deaths = subpopulations.select{|item| item.Cycle == c-1}.inject(0){|memo, n| memo + n.Population * n.HivDeathRate * step } + subpopulations.select{|item| item.Cycle == c-2}.inject(0){|memo, n| memo + n.Population * n.HivDeathRate * step } 
    epi_outputs.hiv_deaths.push deaths
    if epi_outputs.cumulative_hiv_deaths.empty?
      epi_outputs.cumulative_hiv_deaths.push deaths
    else
      epi_outputs.cumulative_hiv_deaths.push epi_outputs.cumulative_hiv_deaths.last + deaths
    end
  end

  groups.each_with_index do |group,g|

    #------- Prevalence and plwa by group -------#
    
    total_infected = subpopulations.select{|item| item.Cycle == c && item.DiseaseStageId != 0 && item.GroupId == g}.inject(0){|memo, n| memo + n.Population }
    total_population = subpopulations.select{|item| item.Cycle == c}.inject(0){|memo, n| memo + n.Population }
    total_pop_in_group = subpopulations.select{|item| item.Cycle == c && item.GroupId == g }.inject(0){|memo, n| memo + n.Population }
    epi_outputs.plwa_by_group[g].push total_infected
    epi_outputs.prevalence_by_group[g].push total_infected / total_pop_in_group
    epi_outputs.percent_of_total_pop_by_group[g].push total_pop_in_group / total_population * 100
    
    #------- Incidence by group -------#
    
    if c.even? && c != 0
      new_infections_in_group = subpopulations.select{|item| item.Cycle == c-1 && item.DiseaseStageId == 0 && item.GroupId == g}.inject(0){|memo, n| memo - n.TotalDiseaseProgressionExits } + subpopulations.select{|item| item.Cycle == c-2 && item.DiseaseStageId == 0 && item.GroupId == g}.inject(0){|memo, n| memo - n.TotalDiseaseProgressionExits }
      total_pop_in_group = subpopulations.select{|item| item.Cycle == c  && item.GroupId == g }.inject(0){|memo, n| memo + n.Population }
      epi_outputs.total_new_infections_by_group[g].push new_infections_in_group
      epi_outputs.total_new_infections_by_group_per_pop[g].push new_infections_in_group / total_pop * 100_000
    end
    
    #------- HIV deaths by group -------#
    
    if c.even? && c != 0
      deaths_in_group = subpopulations.select{|item| item.Cycle == c-1 && item.GroupId == g}.inject(0){|memo, n| memo + n.Population * n.HivDeathRate * step } + subpopulations.select{|item| item.Cycle == c-2 && item.GroupId == g}.inject(0){|memo, n| memo + n.Population * n.HivDeathRate * step } 
      epi_outputs.hiv_deaths_by_group[g].push deaths_in_group
    end
    
    
  end #groups
  
end #each subpopulation

t6 = Time.new


# puts partnership_time
# puts scr_time
# puts dynamics_times
# puts adding_time

# puts t2 - t1
# puts t3 - t2
# puts t4 - t3
# puts t5 - t4
# puts t6 - t5
# puts "total " 
# puts t6 - t1
# Step 11: Export chart data via JSON to website





output = JSON.generate(epi_outputs)

#puts epi_outputs
puts output


